package main

import (
	"fmt"
	"math/rand"
	"sort" // Th√™m import n√†y ƒë·ªÉ s·∫Øp x·∫øp
	"time"

	"github.com/x3pi/Hashgraph/consensus"
	"github.com/x3pi/Hashgraph/event"
	"github.com/x3pi/Hashgraph/node"
	// Adjust import paths according to your Go module structure
	// e.g., "your_module_name/consensus", "your_module_name/event", "your_module_name/node"
)

const (
	numNodes                 = 4
	numSimulationRounds      = 10 // Main simulation rounds
	gossipIterationsPerRound = 2  // How many times gossip runs per simulation round
	votingIterationsPerRound = 2  // How many times virtual voting runs per simulation round
)

func main() {
	rand.Seed(time.Now().UnixNano()) // Initialize random seed

	// Initial balances
	initialBalances := map[string]int{
		"Alice":   1000,
		"Bob":     500,
		"Charlie": 750,
		"David":   600,
		"System":  0, // For potential fees or new coin generation
	}

	// Initialize nodes
	nodes := make([]*node.Node, numNodes)
	for i := 0; i < numNodes; i++ {
		nodes[i] = node.NewNode(i+1, initialBalances) // Node IDs start from 1
	}

	fmt.Println("--- Kh·ªüi t·∫°o m·∫°ng Hashgraph ---")
	for _, n := range nodes {
		n.PrintBalances()
	}
	fmt.Println("---------------------------------")

	// Create some initial events and distribute them
	// Parents are empty for these initial events
	event1 := event.NewEvent("Alice", "Bob", 30, []string{})
	event2 := event.NewEvent("Bob", "Charlie", 20, []string{})
	event3 := event.NewEvent("Alice", "David", 800, []string{}) // Potentially not enough funds
	event4 := event.NewEvent("Charlie", "Alice", 10, []string{})

	// Distribute initial events to different nodes to simulate them originating from those nodes
	if len(nodes) > 0 {
		nodes[0].AddEvent(event1)
		fmt.Printf("üéâ Node %d t·∫°o giao d·ªãch ban ƒë·∫ßu: %s (%s -> %s, %d coin)\n", nodes[0].ID, event1.Hash[:6], event1.Sender, event1.Receiver, event1.Amount)
	}
	if len(nodes) > 1 {
		nodes[1].AddEvent(event2)
		fmt.Printf("üéâ Node %d t·∫°o giao d·ªãch ban ƒë·∫ßu: %s (%s -> %s, %d coin)\n", nodes[1].ID, event2.Hash[:6], event2.Sender, event2.Receiver, event2.Amount)
	}
	if len(nodes) > 2 {
		nodes[2].AddEvent(event3)
		fmt.Printf("üéâ Node %d t·∫°o giao d·ªãch ban ƒë·∫ßu: %s (%s -> %s, %d coin)\n", nodes[2].ID, event3.Hash[:6], event3.Sender, event3.Receiver, event3.Amount)
	}
	if len(nodes) > 3 {
		nodes[3].AddEvent(event4)
		fmt.Printf("üéâ Node %d t·∫°o giao d·ªãch ban ƒë·∫ßu: %s (%s -> %s, %d coin)\n", nodes[3].ID, event4.Hash[:6], event4.Sender, event4.Receiver, event4.Amount)
	}

	// --- Main Simulation Loop ---
	fmt.Printf("\n--- B·∫Øt ƒë·∫ßu %d v√≤ng m√¥ ph·ªèng ---\n", numSimulationRounds)
	for r := 0; r < numSimulationRounds; r++ {
		fmt.Printf("\nüîÑ V√≤ng %d/%d üîÑ\n", r+1, numSimulationRounds)

		// =================================================================
		// ===== T·∫†O GIAO D·ªäCH M·ªöI TRONG M·ªñI V√íNG L·∫∂P (TR·ª™ V√íNG ƒê·∫¶U) =====
		// =================================================================
		if r > 0 {
			creatorNodeIndex := rand.Intn(numNodes)
			creatorNode := nodes[creatorNodeIndex]

			accounts := []string{"Alice", "Bob", "Charlie", "David"}
			senderIndex := rand.Intn(len(accounts))
			receiverIndex := rand.Intn(len(accounts))
			for senderIndex == receiverIndex {
				receiverIndex = rand.Intn(len(accounts))
			}
			sender := accounts[senderIndex]
			receiver := accounts[receiverIndex]
			amount := rand.Intn(50) + 1

			var parentHashes []string
			// (Logic ch·ªçn parent ph·ª©c t·∫°p h∆°n c√≥ th·ªÉ ƒë∆∞·ª£c th√™m v√†o ƒë√¢y n·∫øu c·∫ßn)

			newEvent := event.NewEvent(sender, receiver, amount, parentHashes)
			creatorNode.AddEvent(newEvent)
			fmt.Printf("‚ú® Node %d t·∫°o giao d·ªãch m·ªõi trong V√≤ng %d: %s (%s -> %s, %d coin)\n",
				creatorNode.ID, r+1, newEvent.Hash[:6], newEvent.Sender, newEvent.Receiver, newEvent.Amount)
		}
		// =================================================================
		// ===== K·∫æT TH√öC T·∫†O GIAO D·ªäCH M·ªöI ===============================
		// =================================================================

		// --- Gossip Phase ---
		for i := 0; i < gossipIterationsPerRound; i++ {
			for _, n := range nodes {
				n.Gossip(nodes)
			}
		}

		// --- Virtual Voting Phase ---
		for i := 0; i < votingIterationsPerRound; i++ {
			for _, n := range nodes {
				n.VirtualVoting(numNodes)
			}
		}

		// =====================================================================
		// ===== T√çNH TO√ÅN TH·ªúI GIAN ƒê·ªíNG THU·∫¨N TO√ÄN C·ª§C CHO V√íNG N√ÄY =====
		// =====================================================================
		fmt.Printf("--- V√≤ng %d: T√≠nh to√°n Th·ªùi gian ƒê·ªìng thu·∫≠n To√†n c·ª•c ---\n", r+1)
		consensus.CalculateGlobalConsensusTime(nodes)
		// =====================================================================
		// ===== K·∫æT TH√öC T√çNH TO√ÅN TH·ªúI GIAN ƒê·ªíNG THU·∫¨N =======================
		// =====================================================================

		// =====================================================================
		// ===== TH·ª∞C THI GIAO D·ªäCH CHO V√íNG N√ÄY =====
		// =====================================================================
		fmt.Printf("--- V√≤ng %d: Th·ª±c thi Giao d·ªãch ---\n", r+1)
		for _, n := range nodes {
			n.ExecuteTransactions()
		}
		// =====================================================================
		// ===== K·∫æT TH√öC TH·ª∞C THI GIAO D·ªäCH ===================================
		// =====================================================================

		// =====================================================================
		// ===== IN TR·∫†NG TH√ÅI ƒê·ªíNG THU·∫¨N CHI TI·∫æT SAU M·ªñI V√íNG =====
		// =====================================================================
		fmt.Printf("--- V√≤ng %d: Tr·∫°ng th√°i ƒê·ªìng thu·∫≠n Chi ti·∫øt (Sau th·ª±c thi) ---\n", r+1)
		for _, n := range nodes {
			fmt.Printf("  NODE %d (T·ªïng s·ªë s·ª± ki·ªán: %d):\n", n.ID, len(n.Events))
			if len(n.Events) == 0 {
				fmt.Println("    Kh√¥ng c√≥ s·ª± ki·ªán n√†o.")
			}
			var eventHashes []string
			for hash := range n.Events {
				eventHashes = append(eventHashes, hash)
			}
			sort.Strings(eventHashes)

			for _, hash := range eventHashes {
				event := n.Events[hash]
				trueVotes := 0
				for _, vote := range event.Votes {
					if vote {
						trueVotes++
					}
				}
				fmt.Printf("    - S·ª± ki·ªán %s: H·ª£p l·ªá (Valid): %t, S·ªë phi·∫øu (True Votes): %d/%d (CT: %d, T·∫°o l√∫c: %d)\n",
					event.Hash[:6], event.Valid, trueVotes, len(event.Votes), event.ConsensusTime, event.Timestamp)
			}
		}
		// =====================================================================
		// ===== K·∫æT TH√öC IN TR·∫†NG TH√ÅI ƒê·ªíNG THU·∫¨N =================================
		// =====================================================================

		// =====================================================================
		// ===== IN TR·∫†NG TH√ÅI BALANCE SAU M·ªñI V√íNG (SAU TH·ª∞C THI) =====
		// =====================================================================
		fmt.Printf("--- V√≤ng %d: Tr·∫°ng th√°i S·ªë d∆∞ (Balances) (Sau th·ª±c thi) ---\n", r+1)
		for _, n := range nodes {
			n.PrintBalances()
		}
		fmt.Println("---------------------------------------------")
		// =====================================================================
		// ===== K·∫æT TH√öC IN TR·∫†NG TH√ÅI BALANCE ===============================
		// =====================================================================

	}
	fmt.Println("\n--- K·∫øt th√∫c c√°c v√≤ng m√¥ ph·ªèng ---")

	// Kh√¥ng c·∫ßn g·ªçi l·∫°i CalculateGlobalConsensusTime v√† ExecuteTransactions ·ªü ƒë√¢y n·ªØa
	// v√¨ ch√∫ng ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán trong m·ªói v√≤ng.

	// --- Final State ---
	fmt.Println("\n--- Tr·∫°ng th√°i cu·ªëi c√πng c·ªßa m·∫°ng (Sau t·∫•t c·∫£ c√°c v√≤ng v√† th·ª±c thi) ---")
	for _, n := range nodes {
		n.PrintBalances()
		n.PrintEvents(false) // Set to true for detailed event list
		fmt.Println("---")
	}

	fmt.Println("\n--- Chi ti·∫øt s·ª± ki·ªán cu·ªëi c√πng tr√™n Node 1 (Sau t·∫•t c·∫£ c√°c v√≤ng) ---")
	if len(nodes) > 0 {
		nodes[0].PrintEvents(true)
	}
}
